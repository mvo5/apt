#!/bin/sh -- # no runable script, just for vi

EXIT_CODE=0

# we all like colorful messages
if [ "$MSGCOLOR" != 'NO' ]; then
	if ! expr match "$(readlink -f /proc/$$/fd/1)" '/dev/pts/[0-9]\+' > /dev/null; then
		export MSGCOLOR='NO'
	fi
fi


if [ "$MSGCOLOR" != 'NO' ]; then
	CERROR="\033[1;31m" # red
	CWARNING="\033[1;33m" # yellow
	CMSG="\033[1;32m" # green
	CINFO="\033[1;96m" # light blue
	CDEBUG="\033[1;94m" # blue
	CNORMAL="\033[0;39m" # default system console color
	CDONE="\033[1;32m" # green
	CPASS="\033[1;32m" # green
	CFAIL="\033[1;31m" # red
	CCMD="\033[1;35m" # pink
fi

msgdie() { echo "${CERROR}E: $1${CNORMAL}" >&2; exit 1; }
msgwarn() { echo "${CWARNING}W: $1${CNORMAL}" >&2; }
msgmsg() { echo "${CMSG}$1${CNORMAL}"; }
msginfo() { echo "${CINFO}I: $1${CNORMAL}"; }
msgdebug() { echo "${CDEBUG}D: $1${CNORMAL}"; }
msgdone() { echo "${CDONE}DONE${CNORMAL}"; }
msgnwarn() { echo -n "${CWARNING}W: $1${CNORMAL}" >&2; }
msgnmsg() { echo -n "${CMSG}$1${CNORMAL}"; }
msgninfo() { echo -n "${CINFO}I: $1${CNORMAL}"; }
msgndebug() { echo -n "${CDEBUG}D: $1${CNORMAL}"; }
msgtest() {
	while [ -n "$1" ]; do
		echo -n "${CINFO}$1${CCMD} "
		echo -n "$(echo "$2" | sed -e 's/^aptc/apt-c/' -e 's/^aptg/apt-g/' -e 's/^aptf/apt-f/')${CINFO} "
		shift
		if [ -n "$1" ]; then shift; else break; fi
	done
	echo -n "…${CNORMAL} "
}
msgpass() { echo "${CPASS}PASS${CNORMAL}"; }
msgskip() { echo "${CWARNING}SKIP${CNORMAL}" >&2; }
msgfail() {
	if [ $# -gt 0 ]; then echo "${CFAIL}FAIL: $*${CNORMAL}" >&2;
	else echo "${CFAIL}FAIL${CNORMAL}" >&2; fi
	EXIT_CODE=$((EXIT_CODE+1));
}

# enable / disable Debugging
MSGLEVEL=${MSGLEVEL:-3}
if [ $MSGLEVEL -le 0 ]; then
	msgdie() { true; }
fi
if [ $MSGLEVEL -le 1 ]; then
	msgwarn() { true; }
	msgnwarn() { true; }
fi
if [ $MSGLEVEL -le 2 ]; then
	msgmsg() { true; }
	msgnmsg() { true; }
	msgtest() { true; }
	msgpass() { echo -n " ${CPASS}P${CNORMAL}"; }
	msgskip() { echo -n " ${CWARNING}S${CNORMAL}" >&2; }
	if [ -n "$CFAIL" ]; then
		msgfail() { echo -n " ${CFAIL}FAIL${CNORMAL}" >&2; EXIT_CODE=$((EXIT_CODE+1)); }
	else
		msgfail() { echo -n " ###FAILED###" >&2; EXIT_CODE=$((EXIT_CODE+1)); }
	fi
fi
if [ $MSGLEVEL -le 3 ]; then
	msginfo() { true; }
	msgninfo() { true; }
fi
if [ $MSGLEVEL -le 4 ]; then
	msgdebug() { true; }
	msgndebug() { true; }
fi
msgdone() {
	if [ "$1" = "debug" -a $MSGLEVEL -le 4 ] ||
	   [ "$1" = "info" -a $MSGLEVEL -le 3 ] ||
	   [ "$1" = "msg" -a $MSGLEVEL -le 2 ] ||
	   [ "$1" = "warn" -a $MSGLEVEL -le 1 ] ||
	   [ "$1" = "die" -a $MSGLEVEL -le 0 ]; then
		true;
	else
		echo "${CDONE}DONE${CNORMAL}";
	fi
}
getaptconfig() {
	if [ -f ./aptconfig.conf ]; then
            echo "./aptconfig.conf"
	elif [ -f ../aptconfig.conf ]; then
            echo "../aptconfig.conf"
        fi
}
runapt() {
	msgdebug "Executing: ${CCMD}$*${CDEBUG} "
	local CMD="$1"
	shift
	case $CMD in
	sh|aptitude|*/*) ;;
	*) CMD="${BUILDDIRECTORY}/$CMD";;
	esac
	MALLOC_PERTURB_=21 MALLOC_CHECK_=2 APT_CONFIG="$(getaptconfig)" LD_LIBRARY_PATH=${BUILDDIRECTORY} $CMD "$@"
}
aptconfig() { runapt apt-config "$@"; }
aptcache() { runapt apt-cache "$@"; }
aptcdrom() { runapt apt-cdrom "$@"; }
aptget() { runapt apt-get "$@"; }
aptftparchive() { runapt apt-ftparchive "$@"; }
aptkey() { runapt apt-key "$@"; }
aptmark() { runapt apt-mark "$@"; }
apt() { runapt apt "$@"; }
apthelper() { runapt "${APTHELPERBINDIR}/apt-helper" "$@"; }
aptwebserver() { runapt "${APTWEBSERVERBINDIR}/aptwebserver" "$@"; }
aptitude() { runapt aptitude "$@"; }
aptextracttemplates() { runapt apt-extracttemplates "$@"; }

dpkg() {
	command dpkg --root=${TMPWORKINGDIRECTORY}/rootdir --force-not-root --force-bad-path --log=${TMPWORKINGDIRECTORY}/rootdir/var/log/dpkg.log "$@"
}
dpkgcheckbuilddeps() {
	command dpkg-checkbuilddeps --admindir=${TMPWORKINGDIRECTORY}/rootdir/var/lib/dpkg "$@"
}
gdb() {
	echo "gdb: run »$*«"
	APT_CONFIG=aptconfig.conf LD_LIBRARY_PATH=${LIBRARYPATH} command gdb ${BUILDDIRECTORY}/$1 --args "$@"
}
gpg() {
	# see apt-key for the whole trickery. Setup is done in setupenvironment
	command gpg --ignore-time-conflict --no-options --no-default-keyring \
		--homedir "${TMPWORKINGDIRECTORY}/gnupghome" \
		--no-auto-check-trustdb --trust-model always \
		"$@"
}

exitwithstatus() {
        # error if we about to overflow, but ...
        #   "255 failures ought to be enough for everybody"
        if [ $EXIT_CODE -gt 255 ]; then
            msgdie "Total failure count $EXIT_CODE too big"
        fi
        exit $((EXIT_CODE <= 255 ? EXIT_CODE : 255));
}

shellsetedetector() {
	local exit_status=$?
	if [ "$exit_status" != '0' ]; then
		echo >&2 "${CERROR}E: Looks like the testcases ended prematurely with exitcode: ${exit_status}${CNORMAL}"
		if [ "$EXIT_CODE" = '0' ]; then
			EXIT_CODE="$exit_status"
		fi
	fi
}

addtrap() {
	if [ "$1" = 'prefix' ]; then
		CURRENTTRAP="$2 $CURRENTTRAP"
	else
		CURRENTTRAP="$CURRENTTRAP $1"
	fi
	trap "shellsetedetector; $CURRENTTRAP exitwithstatus;" 0 HUP INT QUIT ILL ABRT FPE SEGV PIPE TERM
}

setupenvironment() {
	TMPWORKINGDIRECTORY=$(mktemp -d)
	TESTDIRECTORY=$(readlink -f $(dirname $0))
	msgninfo "Preparing environment for ${CCMD}$(basename $0)${CINFO} in ${TMPWORKINGDIRECTORY}… "

        # allow overriding the default BUILDDIR location
	BUILDDIRECTORY=${APT_INTEGRATION_TESTS_BUILD_DIR:-"${TESTDIRECTORY}/../../build/bin"}
	LIBRARYPATH=${APT_INTEGRATION_TESTS_LIBRARY_PATH:-"${BUILDDIRECTORY}"}
        METHODSDIR=${APT_INTEGRATION_TESTS_METHODS_DIR:-"${BUILDDIRECTORY}/methods"}
        APTHELPERBINDIR=${APT_INTEGRATION_TESTS_LIBEXEC_DIR:-"${BUILDDIRECTORY}"}
        APTWEBSERVERBINDIR=${APT_INTEGRATION_TESTS_WEBSERVER_BIN_DIR:-"${BUILDDIRECTORY}"}
	test -x "${BUILDDIRECTORY}/apt-get" || msgdie "You need to build tree first"
        # -----

	addtrap "cd /; rm -rf $TMPWORKINGDIRECTORY;"
	cd $TMPWORKINGDIRECTORY
	mkdir rootdir aptarchive keys
	cd rootdir
	mkdir -p etc/apt/apt.conf.d etc/apt/sources.list.d etc/apt/trusted.gpg.d etc/apt/preferences.d
	mkdir -p var/cache var/lib/apt var/log tmp
	mkdir -p var/lib/dpkg/info var/lib/dpkg/updates var/lib/dpkg/triggers
	touch var/lib/dpkg/available
	mkdir -p usr/lib/apt
	ln -s ${METHODSDIR} usr/lib/apt/methods
        # use the autoremove from the BUILDDIRECTORY if its there, otherwise
        # system
        if [ -e ${BUILDDIRECTORY}/../../debian/apt.conf.autoremove ]; then
	    ln -s ${BUILDDIRECTORY}/../../debian/apt.conf.autoremove etc/apt/apt.conf.d/01autoremove
        else
	    ln -s /etc/apt/apt.conf.d/01autoremove etc/apt/apt.conf.d/01autoremove
        fi
	cd ..
	local PACKAGESFILE=$(echo "$(basename $0)" | sed -e 's/^test-/Packages-/' -e 's/^skip-/Packages-/')
	if [ -f "${TESTDIRECTORY}/${PACKAGESFILE}" ]; then
		cp "${TESTDIRECTORY}/${PACKAGESFILE}" aptarchive/Packages
	fi
	local SOURCESSFILE=$(echo "$(basename $0)" | sed -e 's/^test-/Sources-/' -e 's/^skip-/Sources-/')
	if [ -f "${TESTDIRECTORY}/${SOURCESSFILE}" ]; then
		cp "${TESTDIRECTORY}/${SOURCESSFILE}" aptarchive/Sources
	fi
	cp $(find $TESTDIRECTORY -name '*.pub' -o -name '*.sec') keys/
	ln -s ${TMPWORKINGDIRECTORY}/keys/joesixpack.pub rootdir/etc/apt/trusted.gpg.d/joesixpack.gpg
	echo "Dir \"${TMPWORKINGDIRECTORY}/rootdir\";" > aptconfig.conf
	echo "Dir::state::status \"${TMPWORKINGDIRECTORY}/rootdir/var/lib/dpkg/status\";" >> aptconfig.conf
	echo "Debug::NoLocking \"true\";" >> aptconfig.conf
	echo "APT::Get::Show-User-Simulation-Note \"false\";" >> aptconfig.conf
	echo "Dir::Bin::Methods \"${METHODSDIR}\";" >> aptconfig.conf
	echo "Dir::Bin::dpkg \"fakeroot\";" >> aptconfig.conf
	echo "DPKG::options:: \"dpkg\";" >> aptconfig.conf
	echo "DPKG::options:: \"--root=${TMPWORKINGDIRECTORY}/rootdir\";" >> aptconfig.conf
	echo "DPKG::options:: \"--force-not-root\";" >> aptconfig.conf
	echo "DPKG::options:: \"--force-bad-path\";" >> aptconfig.conf
	if ! command dpkg --assert-multi-arch >/dev/null 2>&1; then
		echo "DPKG::options:: \"--force-architecture\";" >> aptconfig.conf # Added to test multiarch before dpkg is ready for it…
	fi
	echo "DPKG::options:: \"--log=${TMPWORKINGDIRECTORY}/rootdir/var/log/dpkg.log\";" >> aptconfig.conf
	echo 'quiet::NoUpdate "true";' >> aptconfig.conf
	echo "Acquire::https::CaInfo \"${TESTDIR}/apt.pem\";" > rootdir/etc/apt/apt.conf.d/99https
        echo "Apt::Cmd::Disable-Script-Warning \"1\";" > rootdir/etc/apt/apt.conf.d/apt-binary
	configcompression '.' 'gz' #'bz2' 'lzma' 'xz'

	# gpg needs a trustdb to function, but it can't be invalid (not even empty)
	# see also apt-key where this trickery comes from:
	local TRUSTDBDIR="${TMPWORKINGDIRECTORY}/gnupghome"
	mkdir "$TRUSTDBDIR"
	chmod 700 "$TRUSTDBDIR"
	# We also don't use a secret keyring, of course, but gpg panics and
	# implodes if there isn't one available - and writeable for imports
	local SECRETKEYRING="${TRUSTDBDIR}/secring.gpg"
	touch $SECRETKEYRING
	# now create the trustdb with an (empty) dummy keyring
	# newer gpg versions are fine without it, but play it safe for now
	gpg --quiet --check-trustdb --secret-keyring $SECRETKEYRING --keyring $SECRETKEYRING >/dev/null 2>&1

	# cleanup the environment a bit
	export PATH="${PATH}:/usr/local/sbin:/usr/sbin:/sbin"
	export LC_ALL=C.UTF-8
	unset LANGUAGE APT_CONFIG
	unset GREP_OPTIONS DEB_BUILD_PROFILES

	msgdone "info"
}

getarchitecture() {
	if [ "$1" = "native" -o -z "$1" ]; then
		eval `aptconfig shell ARCH APT::Architecture`
		if [ -n "$ARCH" ]; then
			echo $ARCH
		else
			dpkg --print-architecture
		fi
	else
		echo $1
	fi
}

getarchitectures() {
	echo "$(aptconfig dump | grep APT::Architecture | cut -d'"' -f 2 | sed '/^$/ d' | sort | uniq | tr '\n' ' ')"
}

getarchitecturesfromcommalist() {
	echo "$1" | sed -e 's#,#\n#g' | sed -e "s/^native\$/$(getarchitecture 'native')/"
}

configarchitecture() {
	{
		echo "APT::Architecture \"$(getarchitecture $1)\";"
		while [ -n "$1" ]; do
			echo "APT::Architectures:: \"$(getarchitecture $1)\";"
			shift
		done
	} >rootdir/etc/apt/apt.conf.d/01multiarch.conf
	configdpkg
}

configdpkg() {
	if [ ! -e rootdir/var/lib/dpkg/status ]; then
		local STATUSFILE=$(echo "$(basename $0)" | sed -e 's/^test-/status-/' -e 's/^skip-/status-/')
		if [ -f "${TESTDIRECTORY}/${STATUSFILE}" ]; then
			cp "${TESTDIRECTORY}/${STATUSFILE}" rootdir/var/lib/dpkg/status
		else
			echo -n > rootdir/var/lib/dpkg/status
		fi
	fi
	rm -f rootdir/etc/apt/apt.conf.d/00foreigndpkg
	if command dpkg --assert-multi-arch >/dev/null 2>&1 ; then
		local ARCHS="$(getarchitectures)"
		if echo "$ARCHS" | grep -E -q '[^ ]+ [^ ]+'; then
			DPKGARCH="$(dpkg --print-architecture)"
			for ARCH in ${ARCHS}; do
				if [ "${ARCH}" != "${DPKGARCH}" ]; then
					if ! dpkg --add-architecture ${ARCH} >/dev/null 2>&1; then
						# old-style used e.g. in Ubuntu-P – and as it seems travis
						echo "DPKG::options:: \"--foreign-architecture\";" >> rootdir/etc/apt/apt.conf.d/00foreigndpkg
						echo "DPKG::options:: \"${ARCH}\";"  >> rootdir/etc/apt/apt.conf.d/00foreigndpkg
					fi
				fi
			done
			if [ "0" = "$(dpkg -l dpkg 2> /dev/null | grep '^i' | wc -l)" ]; then
				# dpkg doesn't really check the version as long as it is fully installed,
				# but just to be sure we choose one above the required version
				insertinstalledpackage 'dpkg' "all" '1.16.2+fake'
			fi
		fi
	fi
}

configcompression() {
	while [ -n "$1" ]; do
		case "$1" in
		'.') echo ".\t.\tcat";;
		'gz') echo "gzip\tgz\tgzip";;
		'bz2') echo "bzip2\tbz2\tbzip2";;
		'lzma') echo "lzma\tlzma\txz --format=lzma";;
		'xz') echo "xz\txz\txz";;
		*) echo "$1\t$1\t$1";;
		esac
		shift
	done > ${TMPWORKINGDIRECTORY}/rootdir/etc/testcase-compressor.conf
}

setupsimplenativepackage() {
	local NAME="$1"
	local ARCH="$2"
	local VERSION="$3"
	local RELEASE="${4:-unstable}"
	local DEPENDENCIES="$5"
	local DESCRIPTION="${6:-"an autogenerated dummy ${NAME}=${VERSION}/${RELEASE}
 If you find such a package installed on your system,
 something went horribly wrong! They are autogenerated
 und used only by testcases and surf no other propose…"}"

	local SECTION="${7:-others}"
	local DISTSECTION
	if [ "$SECTION" = "$(echo "$SECTION" | cut -d'/' -f 2)" ]; then
		DISTSECTION="main"
	else
		DISTSECTION="$(echo "$SECTION" | cut -d'/' -f 1)"
	fi
	local BUILDDIR=incoming/${NAME}-${VERSION}
	mkdir -p ${BUILDDIR}/debian/source
	cd ${BUILDDIR}
	echo "* most suckless software product ever" > FEATURES
	test -e debian/copyright || echo "Copyleft by Joe Sixpack $(date +%Y)" > debian/copyright
	test -e debian/changelog || echo "$NAME ($VERSION) $RELEASE; urgency=low

  * Initial release

 -- Joe Sixpack <joe@example.org>  $(date -R)" > debian/changelog
	test -e debian/control || echo "Source: $NAME
Section: $SECTION
Priority: optional
Maintainer: Joe Sixpack <joe@example.org>
Build-Depends: debhelper (>= 7)
Standards-Version: 3.9.1

Package: $NAME" > debian/control
	if [ "$ARCH" = 'all' ]; then
		echo "Architecture: all" >> debian/control
	else
		echo "Architecture: any" >> debian/control
	fi
	test -z "$DEPENDENCIES" || echo "$DEPENDENCIES" >> debian/control
	echo "Description: $DESCRIPTION" >> debian/control

	test -e debian/compat || echo "7" > debian/compat
	test -e debian/source/format || echo "3.0 (native)" > debian/source/format
	test -e debian/rules || cp /usr/share/doc/debhelper/examples/rules.tiny debian/rules
	cd - > /dev/null
}

buildsimplenativepackage() {
	local NAME="$1"
	local ARCH="$2"
	local VERSION="$3"
	local RELEASE="${4:-unstable}"
	local DEPENDENCIES="$5"
	local DESCRIPTION="${6:-"an autogenerated dummy ${NAME}=${VERSION}/${RELEASE}
 If you find such a package installed on your system,
 something went horribly wrong! They are autogenerated
 und used only by testcases and surf no other propose…"}"

	local SECTION="${7:-others}"
	local PRIORITY="${8:-optional}"
        local FILE_TREE="$9"
        local COMPRESS_TYPE="${10:-gzip}"
	local DISTSECTION
	if [ "$SECTION" = "$(echo "$SECTION" | cut -d'/' -f 2)" ]; then
		DISTSECTION="main"
	else
		DISTSECTION="$(echo "$SECTION" | cut -d'/' -f 1)"
	fi
	local BUILDDIR=${TMPWORKINGDIRECTORY}/incoming/${NAME}-${VERSION}

	msgninfo "Build package ${NAME} in ${VERSION} for ${RELEASE} in ${DISTSECTION}… "
	mkdir -p $BUILDDIR/debian/source
	echo "* most suckless software product ever" > ${BUILDDIR}/FEATURES
	echo "#!/bin/sh
echo '$NAME says \"Hello!\"'" > ${BUILDDIR}/${NAME}

	echo "Copyleft by Joe Sixpack $(date +%Y)" > ${BUILDDIR}/debian/copyright
	echo "$NAME ($VERSION) $RELEASE; urgency=low

  * Initial release

 -- Joe Sixpack <joe@example.org>  $(date -R)" > ${BUILDDIR}/debian/changelog
	echo "Source: $NAME
Section: $SECTION
Priority: $PRIORITY
Maintainer: Joe Sixpack <joe@example.org>
Standards-Version: 3.9.3" > ${BUILDDIR}/debian/control
	local BUILDDEPS="$(echo "$DEPENDENCIES" | grep '^Build-')"
	test -z "$BUILDDEPS" || echo "$BUILDDEPS" >> ${BUILDDIR}/debian/control
	echo "
Package: $NAME" >> ${BUILDDIR}/debian/control

	if [ "$ARCH" = 'all' ]; then
		echo "Architecture: all" >> ${BUILDDIR}/debian/control
	else
		echo "Architecture: any" >> ${BUILDDIR}/debian/control
	fi
	local DEPS="$(echo "$DEPENDENCIES" | grep -v '^Build-')"
	test -z "$DEPS" || echo "$DEPS" >> ${BUILDDIR}/debian/control
	echo "Description: $DESCRIPTION" >> ${BUILDDIR}/debian/control

	echo '3.0 (native)' > ${BUILDDIR}/debian/source/format
	(cd ${BUILDDIR}/..; dpkg-source -b ${NAME}-${VERSION} 2>&1) | sed -n 's#^dpkg-source: info: building [^ ]\+ in ##p' \
		| while read SRC; do
		echo "pool/${SRC}" >> ${BUILDDIR}/../${RELEASE}.${DISTSECTION}.srclist
#		if expr match "${SRC}" '.*\.dsc' >/dev/null 2>&1; then
#			gpg --yes --secret-keyring ./keys/joesixpack.sec \
#				--keyring ./keys/joesixpack.pub --default-key 'Joe Sixpack' \
#				--clearsign -o "${BUILDDIR}/../${SRC}.sign" "${BUILDDIR}/../$SRC"
#			mv "${BUILDDIR}/../${SRC}.sign" "${BUILDDIR}/../$SRC"
#		fi
	done

	for arch in $(getarchitecturesfromcommalist "$ARCH"); do
		rm -rf ${BUILDDIR}/debian/tmp
		mkdir -p ${BUILDDIR}/debian/tmp/DEBIAN ${BUILDDIR}/debian/tmp/usr/share/doc/${NAME} ${BUILDDIR}/debian/tmp/usr/bin
		cp ${BUILDDIR}/debian/copyright ${BUILDDIR}/debian/changelog ${BUILDDIR}/FEATURES ${BUILDDIR}/debian/tmp/usr/share/doc/${NAME}
		cp ${BUILDDIR}/${NAME} ${BUILDDIR}/debian/tmp/usr/bin/${NAME}-${arch}
                if [ -n "$FILE_TREE" ]; then
                    cp -ar "$FILE_TREE" ${BUILDDIR}/debian/tmp
                fi

		(cd ${BUILDDIR}; dpkg-gencontrol -DArchitecture=$arch)
		(cd ${BUILDDIR}/debian/tmp; md5sum $(find usr/ -type f) > DEBIAN/md5sums)
		local LOG="${BUILDDIR}/../${NAME}_${VERSION}_${arch}.dpkg-deb.log"
		# ensure the right permissions as dpkg-deb ensists
		chmod 755 ${BUILDDIR}/debian/tmp/DEBIAN
		if ! dpkg-deb -Z${COMPRESS_TYPE} --build ${BUILDDIR}/debian/tmp ${BUILDDIR}/.. >$LOG 2>&1; then
			cat $LOG
			false
		fi
		rm $LOG
		echo "pool/${NAME}_${VERSION}_${arch}.deb" >> ${BUILDDIR}/../${RELEASE}.${DISTSECTION}.pkglist
	done

	mkdir -p ${BUILDDIR}/../${NAME}_${VERSION}
	cp ${BUILDDIR}/debian/changelog ${BUILDDIR}/../${NAME}_${VERSION}/
	cp ${BUILDDIR}/debian/changelog ${BUILDDIR}/../${NAME}_${VERSION}.changelog
	rm -rf "${BUILDDIR}"
	msgdone "info"
}

buildpackage() {
	local BUILDDIR=$1
	local RELEASE=$2
	local SECTION=$3
	local ARCH=$(getarchitecture $4)
	local PKGNAME="$(echo "$BUILDDIR" | grep -o '[^/]*$')"
	local BUILDLOG="$(readlink -f "${BUILDDIR}/../${PKGNAME}_${RELEASE}_${SECTION}.dpkg-bp.log")"
	msgninfo "Build package ${PKGNAME} for ${RELEASE} in ${SECTION}… "
	cd $BUILDDIR
	if [ "$ARCH" = "all" ]; then
		ARCH="$(dpkg-architecture -qDEB_HOST_ARCH 2> /dev/null)"
	fi
	if ! dpkg-buildpackage -uc -us -a$ARCH >$BUILDLOG 2>&1 ; then
		cat $BUILDLOG
		false
	fi
	local PKGS="$(grep '^dpkg-deb: building package' $BUILDLOG | cut -d'/' -f 2 | sed -e "s#'\.##")"
	local SRCS="$(grep '^dpkg-source: info: building' $BUILDLOG | grep -o '[a-z0-9._+~-]*$')"
	cd - > /dev/null
	for PKG in $PKGS; do
		echo "pool/${PKG}" >> ${TMPWORKINGDIRECTORY}/incoming/${RELEASE}.${SECTION}.pkglist
	done
	for SRC in $SRCS; do
		echo "pool/${SRC}" >> ${TMPWORKINGDIRECTORY}/incoming/${RELEASE}.${SECTION}.srclist
	done
	msgdone "info"
}

buildaptarchive() {
	if [ -d incoming ]; then
		buildaptarchivefromincoming "$@"
	else
		buildaptarchivefromfiles "$@"
	fi
}

createaptftparchiveconfig() {
	local COMPRESSORS="$(cut -d'	' -f 1 ${TMPWORKINGDIRECTORY}/rootdir/etc/testcase-compressor.conf | tr '\n' ' ')"
	COMPRESSORS="${COMPRESSORS%* }"
	local ARCHS="$(find pool/ -name '*.deb' | grep -oE '_[a-z0-9-]+\.deb$' | sort | uniq | sed -e '/^_all.deb$/ d' -e 's#^_\([a-z0-9-]*\)\.deb$#\1#' | tr '\n' ' ')"
	if [ -z "$ARCHS" ]; then
		# the pool is empty, so we will operate on faked packages - let us use the configured archs
		ARCHS="$(getarchitectures)"
	fi
	echo -n 'Dir {
	ArchiveDir "' >> ftparchive.conf
	echo -n $(readlink -f .) >> ftparchive.conf
	echo -n '";
	CacheDir "' >> ftparchive.conf
	echo -n $(readlink -f ..) >> ftparchive.conf
	echo -n '";
	FileListDir "' >> ftparchive.conf
	echo -n $(readlink -f pool/) >> ftparchive.conf
	echo -n '";
};
Default {
	Packages::Compress "'"$COMPRESSORS"'";
	Sources::Compress "'"$COMPRESSORS"'";
	Contents::Compress "'"$COMPRESSORS"'";
	Translation::Compress "'"$COMPRESSORS"'";
	LongDescription "false";
};
TreeDefault {
	Directory "pool/";
	SrcDirectory "pool/";
};
APT {
	FTPArchive {
		Release {
			Origin "joesixpack";
			Label "apttestcases";
			Suite "unstable";
			Description "repository with dummy packages";
			Architectures "' >> ftparchive.conf
	echo -n "$ARCHS" >> ftparchive.conf
	echo 'source";
		};
	};
};' >> ftparchive.conf
	for DIST in $(find ./pool/ -maxdepth 1 -name '*.pkglist' -type f | cut -d'/' -f 3 | cut -d'.' -f 1 | sort | uniq); do
		echo -n 'tree "dists/' >> ftparchive.conf
		echo -n "$DIST" >> ftparchive.conf
		echo -n '" {
	Architectures "' >> ftparchive.conf
		echo -n "$ARCHS" >> ftparchive.conf
		echo -n 'source";
	FileList "' >> ftparchive.conf
		echo -n "${DIST}.\$(SECTION).pkglist" >> ftparchive.conf
		echo -n '";
	SourceFileList "' >> ftparchive.conf
		echo -n "${DIST}.\$(SECTION).srclist" >> ftparchive.conf
		echo -n '";
	Sections "' >> ftparchive.conf
		echo -n "$(find ./pool/ -maxdepth 1 -name "${DIST}.*.pkglist" -type f | cut -d'/' -f 3 | cut -d'.' -f 2 | sort | uniq | tr '\n' ' ')" >> ftparchive.conf
		echo '";
};' >> ftparchive.conf
	done
}

buildaptftparchivedirectorystructure() {
	local DISTS="$(grep -i '^tree ' ftparchive.conf | cut -d'/' -f 2 | sed -e 's#".*##')"
	for DIST in $DISTS; do
		local SECTIONS="$(grep -i -A 5 "dists/$DIST" ftparchive.conf | grep -i 'Sections' | cut -d'"' -f 2)"
		for SECTION in $SECTIONS; do
			local ARCHS="$(grep -A 5 "dists/$DIST" ftparchive.conf | grep Architectures | cut -d'"' -f 2 | sed -e 's#source##')"
			for ARCH in $ARCHS; do
				mkdir -p dists/${DIST}/${SECTION}/binary-${ARCH}
			done
			mkdir -p dists/${DIST}/${SECTION}/source
			mkdir -p dists/${DIST}/${SECTION}/i18n
		done
	done
}

insertpackage() {
	local RELEASE="$1"
	local NAME="$2"
	local ARCH="$3"
	local VERSION="$4"
	local DEPENDENCIES="$5"
	local PRIORITY="${6:-optional}"
	local DESCRIPTION="${7:-"an autogenerated dummy ${NAME}=${VERSION}/${RELEASE}
 If you find such a package installed on your system,
 something went horribly wrong! They are autogenerated
 und used only by testcases and surf no other propose…"}"
	local ARCHS=""
	for arch in $(getarchitecturesfromcommalist "$ARCH"); do
		if [ "$arch" = 'all' -o "$arch" = 'none' ]; then
			ARCHS="$(getarchitectures)"
		else
			ARCHS="$arch"
		fi
		for BUILDARCH in $ARCHS; do
			local PPATH="aptarchive/dists/${RELEASE}/main/binary-${BUILDARCH}"
			mkdir -p $PPATH aptarchive/dists/${RELEASE}/main/source
			touch aptarchive/dists/${RELEASE}/main/source/Sources
			local FILE="${PPATH}/Packages"
			echo "Package: $NAME
Priority: $PRIORITY
Section: other
Installed-Size: 42
Maintainer: Joe Sixpack <joe@example.org>" >> $FILE
			test "$arch" = 'none' || echo "Architecture: $arch" >> $FILE
			echo "Version: $VERSION
Filename: pool/main/${NAME}/${NAME}_${VERSION}_${arch}.deb" >> $FILE
			test -z "$DEPENDENCIES" || echo "$DEPENDENCIES" >> $FILE
			echo "Description: $DESCRIPTION" >> $FILE
			echo >> $FILE
		done
	done
}

insertsource() {
	local RELEASE="$1"
	local NAME="$2"
	local ARCH="$3"
	local VERSION="$4"
	local DEPENDENCIES="$5"
	local ARCHS=""
	local SPATH="aptarchive/dists/${RELEASE}/main/source"
	mkdir -p $SPATH
	local FILE="${SPATH}/Sources"
	echo "Package: $NAME
Binary: $NAME
Version: $VERSION
Maintainer: Joe Sixpack <joe@example.org>
Architecture: $ARCH" >> $FILE
	test -z "$DEPENDENCIES" || echo "$DEPENDENCIES" >> $FILE
	echo "Files:
 d41d8cd98f00b204e9800998ecf8427e 0 ${NAME}_${VERSION}.dsc
 d41d8cd98f00b204e9800998ecf8427e 0 ${NAME}_${VERSION}.tar.gz
" >> $FILE
}

insertinstalledpackage() {
	local NAME="$1"
	local ARCH="$2"
	local VERSION="$3"
	local DEPENDENCIES="$4"
	local PRIORITY="${5:-optional}"
	local STATUS="${6:-install ok installed}"
	local DESCRIPTION="${7:-"an autogenerated dummy ${NAME}=${VERSION}/installed
 If you find such a package installed on your system,
 something went horribly wrong! They are autogenerated
 und used only by testcases and surf no other propose…"}"

	local FILE='rootdir/var/lib/dpkg/status'
	local INFO='rootdir/var/lib/dpkg/info'
	for arch in $(getarchitecturesfromcommalist "$ARCH"); do
		echo "Package: $NAME
Status: $STATUS
Priority: $PRIORITY
Section: other
Installed-Size: 42
Maintainer: Joe Sixpack <joe@example.org>
Version: $VERSION" >> $FILE
		test "$arch" = 'none' || echo "Architecture: $arch" >> $FILE
		test -z "$DEPENDENCIES" || echo "$DEPENDENCIES" >> $FILE
		echo "Description: $DESCRIPTION" >> $FILE
		echo >> $FILE
		if [ "$(dpkg-query -W --showformat='${Multi-Arch}')" = 'same' ]; then
			echo -n > ${INFO}/${NAME}:${arch}.list
		else
			echo -n > ${INFO}/${NAME}.list
		fi
	done
}


buildaptarchivefromincoming() {
	msginfo "Build APT archive for ${CCMD}$(basename $0)${CINFO} based on incoming packages…"
	cd aptarchive
	[ -e pool ] || ln -s ../incoming pool
	[ -e ftparchive.conf ] || createaptftparchiveconfig
	[ -e dists ] || buildaptftparchivedirectorystructure
	msgninfo "\tGenerate Packages, Sources and Contents files… "
	aptftparchive -qq generate ftparchive.conf
	cd - > /dev/null
	msgdone "info"
	generatereleasefiles
}

buildaptarchivefromfiles() {
	msginfo "Build APT archive for ${CCMD}$(basename $0)${CINFO} based on prebuild files…"
	find aptarchive -name 'Packages' -o -name 'Sources' | while read line; do
		msgninfo "\t${line} file… "
		compressfile "$line" "$1"
		msgdone "info"
	done
	generatereleasefiles "$@"
}

compressfile() {
	cat ${TMPWORKINGDIRECTORY}/rootdir/etc/testcase-compressor.conf | while read compressor extension command; do
		if [ "$compressor" = '.' ]; then
			if [ -n "$2" ]; then
				touch -d "$2" "$1"
			fi
			continue
		fi
		cat "$1" | $command > "${1}.${extension}"
		if [ -n "$2" ]; then
			touch -d "$2" "${1}.${extension}"
		fi
	done
}

# can be overridden by testcases for their pleasure
getcodenamefromsuite() {
	case "$1" in
	unstable) echo 'sid';;
	*) echo -n "$1";;
	esac
}
getreleaseversionfromsuite() { true; }
getlabelfromsuite() { true; }

generatereleasefiles() {
	# $1 is the Date header and $2 is the ValidUntil header to be set
	# both should be given in notation date/touch can understand
	msgninfo "\tGenerate Release files… "
	if [ -e aptarchive/dists ]; then
		for dir in $(find ./aptarchive/dists -mindepth 1 -maxdepth 1 -type d); do
			local SUITE="$(echo "$dir" | cut -d'/' -f 4)"
			local CODENAME="$(getcodenamefromsuite $SUITE)"
			local VERSION="$(getreleaseversionfromsuite $SUITE)"
			local LABEL="$(getlabelfromsuite $SUITE)"
			if [ -n "$VERSION" ]; then
				VERSION="-o APT::FTPArchive::Release::Version=${VERSION}"
			fi
			if [ -n "$LABEL" ]; then
				LABEL="-o APT::FTPArchive::Release::Label=${LABEL}"
			fi
			aptftparchive -qq release $dir \
				-o APT::FTPArchive::Release::Suite="${SUITE}" \
				-o APT::FTPArchive::Release::Codename="${CODENAME}" \
				${LABEL} \
				${VERSION} \
					| sed -e '/0 Release$/ d' > $dir/Release # remove the self reference
			if [ "$SUITE" = "experimental" -o "$SUITE" = "experimental2" ]; then
				sed -i '/^Date: / a\
NotAutomatic: yes' $dir/Release
			fi
			if [ -n "$1" -a "$1" != "now" ]; then
				sed -i "s/^Date: .*$/Date: $(date -d "$1" '+%a, %d %b %Y %H:%M:%S %Z')/" $dir/Release
			fi
			if [ -n "$2" ]; then
				sed -i "/^Date: / a\
Valid-Until: $(date -d "$2" '+%a, %d %b %Y %H:%M:%S %Z')" $dir/Release
			fi
		done
	else
		aptftparchive -qq release ./aptarchive | sed -e '/0 Release$/ d' > aptarchive/Release # remove the self reference
	fi
	if [ -n "$1" -a "$1" != "now" ]; then
		for release in $(find ./aptarchive -name 'Release'); do
			touch -d "$1" $release
		done
	fi
	msgdone "info"
}

setupdistsaptarchive() {
	local APTARCHIVE=$(readlink -f ./aptarchive)
	rm -f root/etc/apt/sources.list.d/apt-test-*-deb.list
	rm -f root/etc/apt/sources.list.d/apt-test-*-deb-src.list
	for DISTS in $(find ./aptarchive/dists/ -mindepth 1 -maxdepth 1 -type d | cut -d'/' -f 4); do
		SECTIONS=$(find ./aptarchive/dists/${DISTS}/ -mindepth 1 -maxdepth 1 -type d | cut -d'/' -f 5 | tr '\n' ' ')
		msgninfo "\tadd deb and deb-src sources.list lines for ${CCMD}${DISTS} ${SECTIONS}${CINFO}… "
		echo "deb file://$APTARCHIVE $DISTS $SECTIONS" > rootdir/etc/apt/sources.list.d/apt-test-${DISTS}-deb.list
		echo "deb-src file://$APTARCHIVE $DISTS $SECTIONS" > rootdir/etc/apt/sources.list.d/apt-test-${DISTS}-deb-src.list
		msgdone "info"
	done
}

setupflataptarchive() {
	local APTARCHIVE=$(readlink -f ./aptarchive)
	if [ -f ${APTARCHIVE}/Packages ]; then
		msgninfo "\tadd deb sources.list line… "
		echo "deb file://$APTARCHIVE /" > rootdir/etc/apt/sources.list.d/apt-test-archive-deb.list
		msgdone "info"
	else
		rm -f rootdir/etc/apt/sources.list.d/apt-test-archive-deb.list
	fi
	if [ -f ${APTARCHIVE}/Sources ]; then
		msgninfo "\tadd deb-src sources.list line… "
		echo "deb-src file://$APTARCHIVE /" > rootdir/etc/apt/sources.list.d/apt-test-archive-deb-src.list
		msgdone "info"
	else
		rm -f rootdir/etc/apt/sources.list.d/apt-test-archive-deb-src.list
	fi
}

setupaptarchive() {
	buildaptarchive
	if [ -e aptarchive/dists ]; then
		setupdistsaptarchive
	else
		setupflataptarchive
	fi
	signreleasefiles
	if [ "$1" != '--no-update' ]; then
		msgninfo "\tSync APT's cache with the archive… "
		aptget update -qq
		msgdone "info"
	fi
}

signreleasefiles() {
	local SIGNER="${1:-Joe Sixpack}"
	local GPG="gpg --batch --yes"
	msgninfo "\tSign archive with $SIGNER key… "
	local REXKEY='keys/rexexpired'
	local SECEXPIREBAK="${REXKEY}.sec.bak"
	local PUBEXPIREBAK="${REXKEY}.pub.bak"
	if [ "${SIGNER}" = 'Rex Expired' ]; then
		# the key is expired, so gpg doesn't allow to sign with and the --faked-system-time
		# option doesn't exist anymore (and using faketime would add a new obscure dependency)
		# therefore we 'temporary' make the key not expired and restore a backup after signing
		cp ${REXKEY}.sec $SECEXPIREBAK
		cp ${REXKEY}.pub $PUBEXPIREBAK
		local SECUNEXPIRED="${REXKEY}.sec.unexpired"
		local PUBUNEXPIRED="${REXKEY}.pub.unexpired"
		if [ -f "$SECUNEXPIRED" ] && [ -f "$PUBUNEXPIRED" ]; then
			cp $SECUNEXPIRED ${REXKEY}.sec
			cp $PUBUNEXPIRED ${REXKEY}.pub
		else
			printf "expire\n1w\nsave\n" | $GPG --keyring ${REXKEY}.pub --secret-keyring ${REXKEY}.sec --command-fd 0 --edit-key "${SIGNER}" >/dev/null 2>&1 || true
			cp ${REXKEY}.sec $SECUNEXPIRED
			cp ${REXKEY}.pub $PUBUNEXPIRED
		fi
	fi
	for KEY in $(find keys/ -name '*.sec'); do
		GPG="$GPG --secret-keyring $KEY"
	done
	for KEY in $(find keys/ -name '*.pub'); do
		GPG="$GPG --keyring $KEY"
	done
	for RELEASE in $(find aptarchive/ -name Release); do
		$GPG --default-key "$SIGNER" --armor --detach-sign --sign --output ${RELEASE}.gpg ${RELEASE}
		local INRELEASE="$(echo "${RELEASE}" | sed 's#/Release$#/InRelease#')"
		$GPG --default-key "$SIGNER" --clearsign --output $INRELEASE $RELEASE
		# we might have set a specific date for the Release file, so copy it
		touch -d "$(stat --format "%y" ${RELEASE})" ${RELEASE}.gpg ${INRELEASE}
	done
	if [ -f "$SECEXPIREBAK" ] && [ -f "$PUBEXPIREBAK" ]; then
		mv -f $SECEXPIREBAK ${REXKEY}.sec
		mv -f $PUBEXPIREBAK ${REXKEY}.pub
	fi
	msgdone "info"
}

webserverconfig() {
	msgtest "Set webserver config option '${1}' to" "$2"
	local DOWNLOG='rootdir/tmp/download-testfile.log'
	local STATUS='rootdir/tmp/webserverconfig.status'
	rm -f "$STATUS" "$DOWNLOG"
	if downloadfile "http://localhost:8080/_config/set/${1}/${2}" "$STATUS" > "$DOWNLOG"; then
		msgpass
	else
		cat "$DOWNLOG" "$STATUS"
		msgfail
	fi
	testwebserverlaststatuscode '200'
}

rewritesourceslist() {
	local APTARCHIVE="file://$(readlink -f "${TMPWORKINGDIRECTORY}/aptarchive")"
	for LIST in $(find rootdir/etc/apt/sources.list.d/ -name 'apt-test-*.list'); do
		sed -i $LIST -e "s#$APTARCHIVE#${1}#" -e "s#http://localhost:8080/#${1}#" -e "s#http://localhost:4433/#${1}#"
	done
}

# wait for up to 10s for a pid file to appear to avoid possible race
# when a helper is started and dosn't write the PID quick enough
waitforpidfile() {
        local PIDFILE="$1"
        for i in $(seq 10); do
                if test -s "$PIDFILE"; then
                        return 0
                fi
                sleep 1
        done
        msgdie "waiting for $PIDFILE failed"
        return 1
}

changetowebserver() {
	if [ "$1" != '--no-rewrite' ]; then
		rewritesourceslist 'http://localhost:8080/'
	else
		shift
	fi
	if test -x ${APTWEBSERVERBINDIR}/aptwebserver; then
		cd aptarchive
		local LOG="webserver.log"
		if ! aptwebserver -o aptwebserver::fork=1 "$@" >$LOG 2>&1 ; then
			cat $LOG
			false
		fi
                waitforpidfile aptwebserver.pid
		local PID="$(cat aptwebserver.pid)"
		if [ -z "$PID" ]; then
			msgdie 'Could not fork aptwebserver successfully'
		fi
		addtrap "kill $PID;"
		cd - > /dev/null
	else
		msgdie 'You have to build aptwerbserver or install a webserver'
	fi
}

changetohttpswebserver() {
	if ! which stunnel4 >/dev/null; then
		msgdie 'You need to install stunnel4 for https testcases'
	fi
	if [ ! -e "${TMPWORKINGDIRECTORY}/aptarchive/aptwebserver.pid" ]; then
		changetowebserver --no-rewrite "$@"
	fi
	echo "pid = ${TMPWORKINGDIRECTORY}/aptarchive/stunnel.pid
cert = ${TESTDIRECTORY}/apt.pem
output = /dev/null

[https]
accept = 4433
connect = 8080
" > ${TMPWORKINGDIRECTORY}/stunnel.conf
	stunnel4 "${TMPWORKINGDIRECTORY}/stunnel.conf"
        waitforpidfile "${TMPWORKINGDIRECTORY}/aptarchive/stunnel.pid"
	local PID="$(cat ${TMPWORKINGDIRECTORY}/aptarchive/stunnel.pid)"
        if [ -z "$PID" ]; then
		msgdie 'Could not fork stunnel4 successfully'
	fi
	addtrap 'prefix' "kill ${PID};"
	rewritesourceslist 'https://localhost:4433/'
}

changetocdrom() {
	mkdir -p rootdir/media/cdrom/.disk
	local CD="$(readlink -f rootdir/media/cdrom)"
	echo "acquire::cdrom::mount \"${CD}\";
acquire::cdrom::${CD}/::mount \"mv ${CD}-unmounted ${CD}\";
acquire::cdrom::${CD}/::umount \"mv ${CD} ${CD}-unmounted\";
acquire::cdrom::autodetect 0;" > rootdir/etc/apt/apt.conf.d/00cdrom
	echo -n "$1" > ${CD}/.disk/info
	if [ ! -d aptarchive/dists ]; then
		msgdie 'Flat file archive cdroms can not be created currently'
		return 1
	fi
	mv aptarchive/dists "$CD"
	ln -s "$(readlink -f ./incoming)" $CD/pool
	find rootdir/etc/apt/sources.list.d/ -name 'apt-test-*.list' -delete
	# start with an unmounted disk
	mv "${CD}" "${CD}-unmounted"
	# we don't want the disk to be modifiable
	addtrap 'prefix' "chmod -f -R +w $PWD/rootdir/media/cdrom/dists/ $PWD/rootdir/media/cdrom-unmounted/dists/ || true;"
	chmod -R -w rootdir/media/cdrom-unmounted/dists
}

downloadfile() {
	local PROTO="$(echo "$1" | cut -d':' -f 1 )"
	apthelper -o Debug::Acquire::${PROTO}=1 \
		download-file "$1" "$2" 2>&1 || true
	# only if the file exists the download was successful
	if [ -e "$2" ]; then
		return 0
	else
		return 1
	fi
}

checkdiff() {
	local DIFFTEXT="$(command diff -u "$@" | sed -e '/^---/ d' -e '/^+++/ d' -e '/^@@/ d')"
	if [ -n "$DIFFTEXT" ]; then
		echo >&2
		echo >&2 "$DIFFTEXT"
		return 1
	else
		return 0
	fi
}

testfileequal() {
	local FILE="$1"
	shift
	msgtest "Test for correctness of file" "$FILE"
	if [ -z "$*" ]; then
		echo -n "" | checkdiff $FILE - && msgpass || msgfail
	else
		echo "$*" | checkdiff $FILE - && msgpass || msgfail
	fi
}

testempty() {
	msgtest "Test for no output of" "$*"
	test -z "$($* 2>&1)" && msgpass || msgfail
}

testequal() {
	local MSG='Test of equality of'
	if [ "$1" = '--nomsg' ]; then
		MSG=''
		shift
	fi

	local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequal.comparefile"
	echo "$1" > $COMPAREFILE
	shift

	if [ -n "$MSG" ]; then
		msgtest "$MSG" "$*"
	fi
	$* 2>&1 | checkdiff $COMPAREFILE - && msgpass || msgfail
}

testequalor2() {
	local COMPAREFILE1="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequalor2.comparefile1"
	local COMPAREFILE2="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequalor2.comparefile2"
	local COMPAREAGAINST="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequalor2.compareagainst"
	echo "$1" > $COMPAREFILE1
	echo "$2" > $COMPAREFILE2
	shift 2
	msgtest "Test for equality OR of" "$*"
	$* >$COMPAREAGAINST 2>&1 || true
	if checkdiff $COMPAREFILE1 $COMPAREAGAINST >/dev/null 2>&1 || \
		checkdiff $COMPAREFILE2 $COMPAREAGAINST >/dev/null 2>&1
	then
		msgpass
	else
		echo -n "\n${CINFO}Diff against OR 1${CNORMAL}"
		checkdiff $COMPAREFILE1 $COMPAREAGAINST || true
		echo -n "${CINFO}Diff against OR 2${CNORMAL}"
		checkdiff $COMPAREFILE2 $COMPAREAGAINST || true
		msgfail
	fi
}

testshowvirtual() {
	local VIRTUAL="N: Can't select versions from package '$1' as it is purely virtual"
	local PACKAGE="$1"
	shift
	while [ -n "$1" ]; do
		VIRTUAL="${VIRTUAL}
N: Can't select versions from package '$1' as it is purely virtual"
		PACKAGE="${PACKAGE} $1"
		shift
	done
	msgtest "Test for virtual packages" "apt-cache show $PACKAGE"
	VIRTUAL="${VIRTUAL}
N: No packages found"
	local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testshowvirtual.comparefile"
	local ARCH="$(getarchitecture 'native')"
	echo "$VIRTUAL" | sed -e "s/:$ARCH//" -e 's/:all//' > $COMPAREFILE
	aptcache show -q=0 $PACKAGE 2>&1 | checkdiff $COMPAREFILE - && msgpass || msgfail
}

testnopackage() {
	msgtest "Test for non-existent packages" "apt-cache show $*"
	local SHOWPKG="$(aptcache show "$@" 2>&1 | grep '^Package: ')"
	if [ -n "$SHOWPKG" ]; then
		echo >&2
		echo >&2 "$SHOWPKG"
		msgfail
	else
		msgpass
	fi
}

testdpkginstalled() {
	msgtest "Test for correctly installed package(s) with" "dpkg -l $*"
	local PKGS="$(dpkg -l "$@" 2>/dev/null | grep '^i' | wc -l)"
	if [ "$PKGS" != $# ]; then
		echo >&2 $PKGS
		dpkg -l "$@" | grep '^[a-z]' >&2
		msgfail
	else
		msgpass
	fi
}

testdpkgnotinstalled() {
	msgtest "Test for correctly not-installed package(s) with" "dpkg -l $*"
	local PKGS="$(dpkg -l "$@" 2> /dev/null | grep '^i' | wc -l)"
	if [ "$PKGS" != 0 ]; then
		echo
		dpkg -l "$@" | grep '^[a-z]' >&2
		msgfail
	else
		msgpass
	fi
}

testmarkedauto() {
	local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testmarkedauto.comparefile"
	if [ -n "$1" ]; then
		msgtest 'Test for correctly marked as auto-installed' "$*"
		while [ -n "$1" ]; do echo "$1"; shift; done | sort > $COMPAREFILE
	else
		msgtest 'Test for correctly marked as auto-installed' 'no package'
		echo -n > $COMPAREFILE
	fi
	aptmark showauto 2>&1 | checkdiff $COMPAREFILE - && msgpass || msgfail
}

testsuccess() {
	if [ "$1" = '--nomsg' ]; then
		shift
	else
		msgtest 'Test for successful execution of' "$*"
	fi
	local OUTPUT="${TMPWORKINGDIRECTORY}/rootdir/tmp/testsuccess.output"
	if $@ >${OUTPUT} 2>&1; then
		msgpass
	else
		echo >&2
		cat >&2 $OUTPUT
		msgfail
	fi
}

testfailure() {
	if [ "$1" = '--nomsg' ]; then
		shift
	else
		msgtest 'Test for failure in execution of' "$*"
	fi
	local OUTPUT="${TMPWORKINGDIRECTORY}/rootdir/tmp/testfailure.output"
	if $@ >${OUTPUT} 2>&1; then
		echo >&2
		cat >&2 $OUTPUT
		msgfail
	else
		msgpass
	fi
}

testwebserverlaststatuscode() {
	local DOWNLOG='rootdir/tmp/webserverstatus-testfile.log'
	local STATUS='rootdir/tmp/webserverstatus-statusfile.log'
	rm -f "$DOWNLOG" "$STATUS"
	msgtest 'Test last status code from the webserver was' "$1"
	downloadfile "http://localhost:8080/_config/find/aptwebserver::last-status-code" "$STATUS" > "$DOWNLOG"
	if [ "$(cat "$STATUS")" = "$1" ]; then
		msgpass
	else
		echo >&2
		if [ -n "$2" ]; then
			shift
			echo >&2 '#### Additionally provided output files contain:'
			cat >&2 "$@"
		fi
		echo >&2 '#### Download log of the status code:'
		cat >&2 "$DOWNLOG"
		msgfail "Status was $(cat "$STATUS")"
	fi
}

pause() {
	echo "STOPPED execution. Press enter to continue"
	local IGNORE
	read IGNORE
}
